/* tslint:disable */
/* eslint-disable */
/**
 * Todo api swagger
 * Testing todo swagger API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiAuthLoginPostRequest,
  ApiAuthRegisterPostRequest,
  ApiGroupGroupIdPutRequest,
  ApiTodoPostPostRequest,
} from '../models';
import {
    ApiAuthLoginPostRequestFromJSON,
    ApiAuthLoginPostRequestToJSON,
    ApiAuthRegisterPostRequestFromJSON,
    ApiAuthRegisterPostRequestToJSON,
    ApiGroupGroupIdPutRequestFromJSON,
    ApiGroupGroupIdPutRequestToJSON,
    ApiTodoPostPostRequestFromJSON,
    ApiTodoPostPostRequestToJSON,
} from '../models';

export interface ApiAuthLoginPostOperationRequest {
    body?: ApiAuthLoginPostRequest;
}

export interface ApiAuthRegisterPostOperationRequest {
    body?: ApiAuthRegisterPostRequest;
}

export interface ApiGroupGroupIdDeleteRequest {
    groupId: number;
}

export interface ApiGroupGroupIdGetRequest {
    groupId: number;
}

export interface ApiGroupGroupIdPutOperationRequest {
    groupId: number;
    body?: ApiGroupGroupIdPutRequest;
}

export interface ApiGroupPostRequest {
    body?: ApiGroupGroupIdPutRequest;
}

export interface ApiTodoPostPostOperationRequest {
    body?: ApiTodoPostPostRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async apiAuthLoginPostRaw(requestParameters: ApiAuthLoginPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiAuthLoginPostRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiAuthLoginPost(requestParameters: ApiAuthLoginPostOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiAuthLoginPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiAuthRegisterPostRaw(requestParameters: ApiAuthRegisterPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/auth/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiAuthRegisterPostRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiAuthRegisterPost(requestParameters: ApiAuthRegisterPostOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiAuthRegisterPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiGroupAllGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/group/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiGroupAllGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiGroupAllGetRaw(initOverrides);
    }

    /**
     */
    async apiGroupGroupIdDeleteRaw(requestParameters: ApiGroupGroupIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling apiGroupGroupIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/group/{groupId}`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiGroupGroupIdDelete(requestParameters: ApiGroupGroupIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiGroupGroupIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiGroupGroupIdGetRaw(requestParameters: ApiGroupGroupIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling apiGroupGroupIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/group/{groupId}`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiGroupGroupIdGet(requestParameters: ApiGroupGroupIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiGroupGroupIdGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiGroupGroupIdPutRaw(requestParameters: ApiGroupGroupIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling apiGroupGroupIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/group/{groupId}`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApiGroupGroupIdPutRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiGroupGroupIdPut(requestParameters: ApiGroupGroupIdPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiGroupGroupIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiGroupPostRaw(requestParameters: ApiGroupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/group/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiGroupGroupIdPutRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiGroupPost(requestParameters: ApiGroupPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiGroupPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiTodoDeleteByIdIdDeleteRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/todo/deleteById/{id}`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiTodoDeleteByIdIdDelete(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiTodoDeleteByIdIdDeleteRaw(initOverrides);
    }

    /**
     */
    async apiTodoGetByIdIdGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/todo/getById/{id}`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiTodoGetByIdIdGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiTodoGetByIdIdGetRaw(initOverrides);
    }

    /**
     */
    async apiTodoPostPostRaw(requestParameters: ApiTodoPostPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/todo/post`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiTodoPostPostRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiTodoPostPost(requestParameters: ApiTodoPostPostOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiTodoPostPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiTodoUpdateByIdIdPutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/todo/updateById/{id}`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiTodoUpdateByIdIdPut(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiTodoUpdateByIdIdPutRaw(initOverrides);
    }

    /**
     */
    async apiUserGetProfileGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user/get-profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUserGetProfileGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiUserGetProfileGetRaw(initOverrides);
    }

}
